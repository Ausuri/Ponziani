@inject IJSRuntime js

@if (Mode == DisplayMode.TABULAR)
{
	Game g = new Game(Game.StartPosition);
	Console.WriteLine($"Rendering Scoresheet {Game.Moves.Count} Plies!");
	<table class="pzNotTable" id="@Id" @attributes=OtherAttributes>
	 <thead class="pzNotTableHead">
	 </thead>
		@if (Game.Moves.Count > 0)
		{
		 <tbody @ref="_tbody" class="pzNotTableBody" style="@($"overflow-y:scroll; display:block;{Height()}")">

				@if (g.Position.SideToMove == Side.BLACK)
				{
					int moveNumber = g.Position.MoveNumber;
			  <tr>
			   <td class="pzNotColMovenumber">@g.Position.MoveNumber</td>
			   <td class="pzNotColWhite">...</td>
			   <td class="pzNotColBlack" @onclick="@(e => SelectMoveAsync(e, moveNumber, Side.BLACK))">@g.Position.ToSAN(Game.Moves[0])</td>
			  </tr>
					g.Add(Game.Moves[0]);
				}
				@for (int i = g.Moves.Count; g.Moves.Count < Game.Moves.Count; i += 2)
				{
					int moveNumber = g.Position.MoveNumber;
			  <tr>
			   <td class="pzNotColMovenumber">@g.Position.MoveNumber</td>
			   <td class="pzNotColWhite" @onclick="@(e => SelectMoveAsync(e, moveNumber, Side.WHITE))">@g.Position.ToSAN(Game.Moves[i])</td>
						@{
							g.Add(Game.Moves[i]);
						}
						@if (g.Moves.Count < Game.Moves.Count)
						{
				   <td class="pzNotColBlack" @onclick="@(e => SelectMoveAsync(e, moveNumber, Side.BLACK))">@g.Position.ToSAN(Game.Moves[i+1])</td>
							g.Add(Game.Moves[i + 1]);
						}
						else
						{
				   <td class="pzNotColBlack  pzNotResult">@PGN.ResultToString(Game.Result)</td>
						}
			  </tr>
				}
				@if(g.SideToMove ==Side.WHITE)
				{
					<tr> <td class="pzNotColMovenumber">@g.Position.MoveNumber</td><td class="pzNotColWhite pzNotResult">@PGN.ResultToString(Game.Result)</td><td class="pzNotColBlack"></td></tr>
				}
		 </tbody>
		}
	</table>
}
else if (Mode == DisplayMode.INLINE)
{
	Game g = new Game(Game.StartPosition);
	<div id="@Id" @attributes=OtherAttributes>
		@if (g.SideToMove == Side.BLACK)
		{
			<text>&#32;</text><span class="pzMoveText">@g.Position.MoveNumber. ...</span>
		}
		@for (int i = 0; i < Game.Moves.Count; ++i)
		{
			int moveNumber = g.Position.MoveNumber;
			Side side = g.SideToMove;
			@if (side == Side.WHITE)
			{
				<text>&#32;</text><span class="pzMoveText">@g.Position.MoveNumber.</span>
			}
			<text>&#32;</text><span class="pzMoveText" @onclick="@(e => SelectMoveAsync(e, moveNumber, side))">@(g.Position.ToSAN(Game.Moves[i]))</span>
			g.Add(Game.Moves[i]);
		}
	 <text>&#32;</text><span class="pzMoveText pzNotResult">@PGN.ResultToString(Game.Result)</span>
	</div>
}

@code {

}
