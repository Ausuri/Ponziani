@page "/ecobrowser"
<EditForm Model="@this">
	<div class="form-group row">
		<label class="col-sm-3 col-form-label" for="inpChapter">ECO Chapter</label>
		<div class="input-group col-sm-9">
			<InputSelect class="form-control" Name="chapter" @bind-Value="Chapter" id="inpChapter">
				@if (Chapter == null)
				{
					<option Name="chapter" Value="">Select...</option>
				}
				@foreach (var v in Eco.Chapter)
				{
		<option Name="chapter" Value="@v.Key.Item1">@($"{v.Key.Item1}-{v.Key.Item2} {v.Value}")</option>
				}
   </InputSelect>
  </div>
 </div>
 <div class="form-group row">
  <label class="col-sm-3 col-form-label" for="inpMain">Main Variants</label>
  <div class="input-group col-sm-9">
   <InputSelect class="form-control" Name="mainkey" @bind-Value="maineco" id="inpMain">
				@if (Chapter != null)
				{
					foreach (var v in Eco.Keyvariants(Chapter[0], SelectedChapter.Item1, SelectedChapter.Item2))
					{
			<option Name="mainkey" Value="@Eco.GetID(v)">@($"{v.Key} {v.Text}")</option>
					}
				}
				else
				{
		<option Name="mainkey" Value="0">Select Chapter first</option>
				}
   </InputSelect>
  </div>
 </div>
 <div class="form-group row">
  <label class="col-sm-3 col-form-label" for="inpEco">Variants</label>
  <div class="input-group col-sm-9">
   <InputSelect class="form-control" Name="subkey" @bind-Value="EcoKey" id="inpEco">
				@if (maineco != 0)
				{
		<option Name="subkey" Value="@maineco">@($"{Eco.Get(maineco).Key} {Eco.Get(maineco).Text}")</option>
					var sv = Eco.Subvariants(Eco.Get(maineco));
					@foreach (var v in sv)
					{
			<option Name="subkey" Value="@Eco.GetID(v)">@($"{v.Key} {v.Text}")</option>
					}
				}
				else
				{
		<option Name="subkey" Value="0">Select Mainvariant first</option>
				}
   </InputSelect>
  </div>
 </div>
</EditForm>
<div class="row justify-content-center">
 <Chessboard Fen="@Fen" OnMovePlayed="OnMovePlayed" />
 <Scoresheet Game="@game" style="width: 400px; height: 400px" OnMoveSelected="OnMoveSelected" />
</div>


@code {
	string Chapter;
	ulong maineco;
	ulong _ecoKey = 0;
	ulong EcoKey
	{
		get { return _ecoKey; }
		set
		{
			if (value != _ecoKey)
			{
				_ecoKey = value;
				eco = Eco.Get(_ecoKey);
				game = Eco.GetGame(eco);
				Fen = game.Position.FEN;
			}
		}
	}

	string Fen = PonzianiComponents.Chesslib.Fen.INITIAL_POSITION;
	Eco eco;
	Game game = new Game();

	Tuple<string, string> SelectedChapter => Chapter != null && Chapter.Trim().Length > 0 ? Eco.Chapter.Where(c => c.Key.Item1 == Chapter).First().Key : new("A00", "E99");

	private void OnMoveSelected(MoveSelectInfo msi)
	{
		Fen = msi.Position.FEN;
	}

	private void OnMovePlayed(MovePlayedInfo mpi)
	{
		game.Add(new ExtendedMove(mpi.Move));
		Eco e = Eco.Get(game);
		if (e != null)
		{
			Game ngame = (Game)game.Clone();
			EcoKey = Eco.GetID(e);
			string skey = e.Key.Substring(0, 3);
			foreach (var c in Eco.Chapter)
			{
				if (skey.CompareTo(c.Key.Item1) >= 0 && skey.CompareTo(c.Key.Item2) <= 0)
				{
					Chapter = c.Key.Item1;
					break;
				}
			}
			Eco keyEco = Eco.Keyvariant(e);
			maineco = Eco.GetID(keyEco);
			game = ngame;
			Fen = ngame.Position.FEN;
		}

	}

}
